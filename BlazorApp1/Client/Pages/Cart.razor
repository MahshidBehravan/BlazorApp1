@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<h3>Shopping Cart</h3>

@if(cartProducts ==null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
       {
           <div class="container">
               <div class="image-wrapper">
                   <img src="@product.ImageURL"  class="image"/>
               </div>
               <div class="name">
                   <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                   <span>@product.ProductType</span><br/>
                   <input type="number" value="@product.Quantity" 
                   @onchange="@((ChangeEventArgs e)=> UpdateQuantity(e.Value.ToString(), product))" class="form-control input-quantity" min="1"/>
                   <button  class="btn-delete" @onclick="@(()=> RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Delete</button>
               </div>
               <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
           </div> 
       }
       <div class="cart-product-price"> Total(@cartProducts.Count) : $@cartProducts.Sum(product=>product.Price * product.Quantity)</div>
    </div>
    <button @onclick="PlaceOrder" class="btn btn-success">Place Order</button>
}

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task  RemoveProductFromCart(int productId, int productTyprId)
    {
        await CartService.RemoveProductFromCart(productId,productTyprId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        if((await CartService.GetCartItems()).Count == 0)
        {
            message = " Your cart is empty";
            cartProducts = new List<CartProductResponse>();

        }
        else
        {
            cartProducts=await CartService.GetCartProducts();
        }
    }

    private async Task UpdateQuantity(string value, CartProductResponse product)
    {
        product.Quantity = Convert.ToInt32(value);
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }
    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
    }
}
